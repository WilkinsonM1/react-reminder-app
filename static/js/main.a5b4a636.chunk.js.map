{"version":3,"sources":["components/signIn.js","components/signUp.js","components/reminder.js","components/displayReminders.js","App.js","serviceWorker.js","index.js"],"names":["SignIn","props","forgotUser","className","onSubmit","type","placeholder","onClick","signInHandler","registerHandler","onChange","event","signedInUserHandler","forgotHandler","SignUp","emailHandler","usernameHandler","signedUpHandler","Reminder","id","signInUser","reminderHandler","addReminder","DisplayReminders","reminders","deleteHandler","App","state","persons_id","email","username","newReminder","status","signUpHandler","setState","console","log","fetch","mode","a","data","then","response","json","reminderArr","map","reminder","signedIn","alert","target","value","preventDefault","userIdHandler","pop","show","displayReminders","this","x","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5b4a636.chunk.js","sourcesContent":["import React from 'react'\n\n// the sign in component with display an input box where user types in her username and a submit button which\n// will then go on to change the state inside out app class compponent to show she has signed in and show the list of reminders and AddReminder component\n// there will also be a \"forgot your username?\" which the user can click on which display a different from where user inputs her email instead.\nconst SignIn  = ( props ) => {\n\n    if(props.forgotUser === true){\n        return (\n            <div className='sign-in'>\n                <h1>Sign in here:</h1>\n                <form className=\"sign-in-form\" onSubmit={props.onSubmit}>\n                    <input type='text' className='input-email-sign-in'\n                            placeholder='Email'/>\n                    <button onClick={props.signInHandler}>Login</button>\n                    <button onClick={props.registerHandler}>Register</button>\n                </form>\n            </div>\n        )\n        } else {\n        return (\n            <div className='sign-in'>\n                <h1>Sign in here:</h1>\n                \n                    <input  type='text'\n                            className='input-username-sign-in'\n                            placeholder='Username'\n                            onChange={event => props.signedInUserHandler(event)}/>\n                    <button onClick={props.signInHandler}>Login</button>\n                    <button onClick={props.registerHandler}>Register</button>\n               \n                <p className='forgot-username' onClick={props.forgotHandler}>Forgot your username?</p>\n            </div>\n        )}\n    }\n   \n    // return (\n    //     <div className='sign-in'>\n    //         <form className=\"sign-in-form\" onSubmit={props.onSubmit}>\n                \n    //             <input  \n    //                 type='text'\n    //                 className='input-username-sign-in'\n    //                 placeholder='Username'\n    //                 ref = {input => props.username = input}\n                \n    //             />\n\n    //         </form>\n    //         <p className='forgot-username' onClick={props.forgotHandler}>Forgot your username?</p>}\n\n\n    //     </div>\n    \n    // )\n\n\nexport default SignIn","import React from 'react';\n\n\nconst SignUp = (props) => {\n    return (\n        <div>\n            <h1>Register here:</h1>\n            \n                <input type='text' className='input-email-sign-up' placeholder='Email' onChange={event => props.emailHandler(event)}/>\n                <input type='text' className='username' placeholder='Username' onChange={event => props.usernameHandler(event)}/>\n                <button onClick={props.signedUpHandler}>Submit</button>\n            \n        </div>\n    )\n}\n\n\n\n\nexport default SignUp;\n\n/*\n<form className=\"sign-in-form\" onSubmit={props.onSubmit}>\n                    <input type='text' className='input-email-sign-in'\n                            placeholder='Email'/>\n                    <button onClick={props.signInHandler}>Submit</button>\n                </form>\n                */","import React from 'react';\n// import { tsPropertySignature } from '@babel/types';\n\nfunction Reminder (props) {\n    return (\n        <div id='RCont'>\n            <h1>Welcome {props.signInUser}</h1>\n            <input id='newReminder' onChange={event => props.reminderHandler(event)} placeholder='add reminder...'></input>\n            <button id='addReminder' onClick={props.addReminder}>Add Reminder</button>\n        </div>\n    )\n}\n\nexport default Reminder;\n\n// onChange={event => props.reminderHandler(event)}","import React from 'react';\n/*\nconst Reminder = (props) => {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n*/\n\nconst DisplayReminders = (props) => {\nreturn (\n    <div>\n        <ul>\n            <h3 >\n                {props.reminders}\n            </h3>\n            <button onClick={props.deleteHandler}>X</button>\n            <hr/>\n        </ul>\n        \n    </div>\n)\n}\n\n\nexport default DisplayReminders;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SignIn from \"./components/signIn\";\nimport SignUp from \"./components/signUp\";\nimport Reminder from \"./components/reminder\";\nimport DisplayReminders from \"./components/displayReminders\";\n\nclass App extends Component {\n  state = {\n    forgotUser: false,\n    \n    \n    persons_id: 0,\n    email: \"\",\n    username: \"\",\n    signInUser: \"\",\n    reminders: [],\n    newReminder: \"\",\n    \n    status: 'not-registered'\n  };\n\n  // use async await to handle your fetches better FOR EXAMPLE\n  async componentDidMount() {\n    // fetch('/data')\n    // .then(response => response.json())\n    // .then(data => {\n    //   // let data = myJson\n    //   console.log(data.data);\n    //   })\n    let response = await fetch(\"/data\");\n    let data = await response.json();\n    console.log(data);\n  }\n\n  signUpHandler = () => {\n    if (this.state.email != null && this.state.username != null) {\n      this.setState({\n        // signedUp: true\n        status: 'signed-up'\n      });\n\n      console.log(this.state.email);\n      console.log(this.state.username);\n\n      fetch(\n        `remotemysql.com/register?email=${this.state.email}.com&username=${this.state.username}`,\n        { mode: \"no-cors\" }\n      );\n    } else {\n      return;\n    }\n  };\n\n  signInHandler = async () => {\n    let data = await fetch(\n      `/checkUser?username=${this.state.signInUser}`,\n      { mode: \"no-cors\" }\n    );\n\n   await fetch (\n      `/checkUserId?username=${this.state.signInUser}`\n    )\n      .then(response => response.json())\n      .then((data) => {\n        this.setState({\n          persons_id: data.data\n        })\n        console.log(data.data)\n        console.log(this.state.persons_id)\n      });\n\n\n    await fetch (\n      `/reminder-list?persons_id=${this.state.persons_id}`\n    )\n     .then(response => response.json())\n     .then((data) => {\n       const reminderArr = data.data.map(reminders => reminders.reminder)\n        this.setState({\n          reminders: reminderArr\n        })\n        console.log(data)\n\n     });\n\n    // console.log(data)\n\n    \n    // .then( (result)=> {\n    //     console.log(result)\n    // })\n    \n\n    if (data) {\n      this.setState({ \n        // signedIn: true, \n        // signedUp: true,\n        status: 'signed-in'\n      });\n      \n    } else {\n      this.setState({ signedIn: false });\n      alert(\"incorrect username entered\")\n   \n    }\n    \n   \n \n  };\n\n  emailHandler = event => {\n    this.setState({ email: event.target.value });\n    console.log(event.target.value);\n  };\n\n  usernameHandler = event => {\n    this.setState({ username: event.target.value });\n  };\n  signedInUserHandler = event => {\n    event.preventDefault();\n    this.setState({ signInUser: event.target.value });\n  };\n\n  userIdHandler = () => {\n    console.log(this.state.username);\n    // this.state.signedIn ? this.setState({ userId: 1 }) : ;\n  };\n\n  reminderHandler = event => {\n    // let input = event.target.value;\n    // this.state.reminders.push(input)\n    this.setState({ newReminder: event.target.value });\n\n    console.log(this.state.newReminder);\n  };\n\n  addReminder = async () => {\n     fetch(`/reminder?reminder=${this.state.newReminder}&persons_id=${this.state.persons_id}`, {\n      mode: \"no-cors\"\n    });\n\n    await fetch (\n      `/reminder-list?persons_id=${this.state.persons_id}`\n    )\n     .then(response => response.json())\n     .then((data) => {\n       const reminderArr = data.data.map(reminders => reminders.reminder)\n        this.setState({\n          reminders: reminderArr\n        })})\n\n    \n  };\n\n  deleteHandler = () => {\n    this.state.reminders.pop();\n    this.setState({ reminders: this.state.reminders });\n  };\n\n  forgotHandler = () => {\n    this.setState({\n      forgotUser: true\n    });\n  };\n\n  registerHandler = () => {\n    this.setState({\n      status: 'registering'\n    });\n\n  };\n\n\n\n  show = () => {\n    \n    if(this.state.status == 'signed-up' || this.state.status == 'not-registered'){\n      return(\n      <SignIn\n        forgotUser={this.state.forgotUser}\n        forgotHandler={this.forgotHandler}\n        signInHandler={this.signInHandler}\n        signedInUserHandler={this.signedInUserHandler}\n        registerHandler={this.registerHandler}\n        />)\n    }\n    else if(this.state.status == 'registering'){\n     return( <SignUp\n        emailHandler={this.emailHandler}\n        usernameHandler={this.usernameHandler}\n        signedUpHandler={this.signUpHandler}\n        />)\n    }\n    else if(this.state.status == 'signed-in'){\n      return(<Reminder\n            addReminder={this.addReminder}\n            reminderHandler={this.reminderHandler}\n            signInUser={this.state.signInUser}\n          />\n          )\n    }\n\n  }\n\n  // key={this.state.reminder.indexOf(reminders)}\n\n  render() {\n    let reminderList = this.state.reminders;\n\n    const displayReminders = reminderList.map(x => (\n      <DisplayReminders reminders={x} deleteHandler={this.deleteHandler} />\n    ));\n    return (\n      <div className=\"App\">\n         <h1>Reminder App!</h1>\n         \n\n        {this.show()}\n        {displayReminders}\n       \n\n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// componentDidMount(event) {\n// fetch('/data', {\n//     method: 'POST',\n//     content: 'application/json',\n//     body: JSON.stringify({\n//       email: '',\n//       username: '',\n//     })\n//   })\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}